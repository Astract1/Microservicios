# Red compartida para todos los servicios
networks:
  microservicios-net:
    driver: bridge

# Volúmenes persistentes
volumes:
  mariadb_data:
    driver: local
  risk_data:
    driver: local
  prevention_data:
    driver: local

services:
  #=======================================================
  # SERVICIO DE BASE DE DATOS
  #=======================================================
  mariadb:
    image: mariadb:10.6
    container_name: mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-admin}
      MYSQL_DATABASE: monitoreo_ambiental
      MYSQL_USER: db_user
      MYSQL_PASSWORD: ${DB_PASSWORD:-db_password}
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./packages/node-monitoring/database-schema.sql:/docker-entrypoint-initdb.d/01-init-monitoring.sql
      - ./packages/node-education/database-schema.sql:/docker-entrypoint-initdb.d/02-init-education.sql
    ports:
      - "3306:3306"
    command: --bind-address=0.0.0.0 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - microservicios-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  #=======================================================
  # SERVICIOS BACKEND
  #=======================================================
  
  # Servicio de monitoreo ambiental
  node-monitoring:
    build:
      context: ./packages/node-monitoring
      dockerfile: Dockerfile
    container_name: microservicios-node-monitoring
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=mariadb
      - DB_USER=root
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-admin}
      - DB_DATABASE=monitoreo_ambiental
      - WEATHER_API_KEY=${WEATHER_API_KEY:-sample_key}
      - WEATHER_API_URL=${WEATHER_API_URL:-https://api.openweathermap.org/data/2.5}
      - IQAIR_API_KEY=${IQAIR_API_KEY:-sample_key}
      - IQAIR_BASE_URL=${IQAIR_BASE_URL:-http://api.airvisual.com/v2}
    ports:
      - "3001:3001"
    networks:
      - microservicios-net
    depends_on:
      mariadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Servicio de educación ambiental
  node-education:
    build:
      context: ./packages/node-education
      dockerfile: Dockerfile
    container_name: microservicios-node-education
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=mariadb
      - DB_USER=root
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-admin}
      - DB_DATABASE=monitoreo_ambiental
      - MONITORING_API_URL=http://microservicios-node-monitoring:3001/api
    ports:
      - "3022:3002"
    networks:
      - microservicios-net
    depends_on:
      node-monitoring:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Servicio de evaluación de riesgos
  dotnet-risk:
    build:
      context: ./packages/dotnet-risk
      dockerfile: Dockerfile
    container_name: microservicios-dotnet-risk
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DATABASE_CONNECTION=Data Source=/app/Data/RiskService.db
      - WEATHER_API_KEY=${WEATHER_API_KEY:-sample_key}
      - ASPNETCORE_URLS=http://+:80
      - MONITORING_API_URL=http://microservicios-node-monitoring:3001/api
    volumes:
      - risk_data:/app/Data
    ports:
      - "5002:80"
    networks:
      - microservicios-net
    depends_on:
      node-monitoring:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Servicio de prevención
  dotnet-prevention:
    build:
      context: ./packages/dotnet-prevention
      dockerfile: Dockerfile
    container_name: microservicios-dotnet-prevention
    restart: unless-stopped
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DATABASE_CONNECTION=Data Source=/app/Data/PreventionService.db
      - DOTNET_RISK_API_URL=http://microservicios-dotnet-risk
      - WEATHER_API_KEY=${WEATHER_API_KEY:-sample_key}
      - ASPNETCORE_URLS=http://+:80
      - MONITORING_API_URL=http://microservicios-node-monitoring:3001/api
    volumes:
      - prevention_data:/app/Data
    networks:
      - microservicios-net
    depends_on:
      dotnet-risk:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  #=======================================================
  # INTERFAZ DE USUARIO UNIFICADA
  #=======================================================
  
  # Frontend unificado que integra todas las UIs
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_NODE_MONITORING_URL=http://microservicios-node-monitoring:3001
        - REACT_APP_API_URL=/api
        - REACT_APP_WEATHER_API_URL=/api/weather
        - REACT_APP_EDUCATION_API_URL=/education-api
        - REACT_APP_RISK_API_URL=/risk-api
        - REACT_APP_PREVENTION_API_URL=/prevention-api
        - REACT_APP_MAP_PROVIDER=openstreetmap
    container_name: microservicios-frontend
    restart: unless-stopped
    ports:
      - "8000:80"
    networks:
      - microservicios-net
    depends_on:
      node-monitoring:
        condition: service_healthy
      node-education:
        condition: service_healthy
      dotnet-risk:
        condition: service_healthy
      dotnet-prevention:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  #=======================================================
  # API GATEWAY Y HERRAMIENTAS
  #=======================================================
  
  # API Gateway con Nginx
  api-gateway:
    image: nginx:alpine
    container_name: frontend
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/gateway.conf:/etc/nginx/conf.d/default.conf
    networks:
      - microservicios-net
    depends_on:
      node-monitoring:
        condition: service_healthy
      node-education:
        condition: service_healthy
      dotnet-risk:
        condition: service_healthy
      dotnet-prevention:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Herramienta de Administración DB (solo en desarrollo)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mariadb
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD:-admin}
    ports:
      - "8080:80"
    networks:
      - microservicios-net
    depends_on:
      mariadb:
        condition: service_healthy
    # Perfiles disponibles: dev (desarrollo) y full (todos los servicios)
    profiles:
      - dev
      - full