# Configuración de Docker Compose para Microservicios de Monitoreo Ambiental

services:
  # Servicio de Base de Datos MariaDB
  mariadb:
    image: mariadb:10.6
    container_name: monitoreo-ambiental-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-admin}
      MYSQL_DATABASE: monitoreo_ambiental
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./packages/node-monitoring/database-schema.sql:/docker-entrypoint-initdb.d/init-monitoring.sql
      - ./packages/node-education/database-schema.sql:/docker-entrypoint-initdb.d/init-education.sql
    # Puerto removido para mayor seguridad - solo accesible desde la red interna
    command: --bind-address=0.0.0.0
    networks:
      - monitoreo-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio Backend de Monitoreo Ambiental
  monitoreo-ambiental-api:
    build:
      context: ./packages/node-monitoring
      dockerfile: Dockerfile
    container_name: monitoreo-ambiental-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=mariadb
      - DB_USER=root
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-admin}
      - DB_DATABASE=monitoreo_ambiental
      - IQAIR_API_KEY=${IQAIR_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - monitoreo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/diagnostics"]
      interval: 20s
      timeout: 10s
      retries: 3

  # Servicio de Evaluación de Riesgos (dotnet-risk)
  dotnet-risk:
    build:
      context: ./packages/dotnet-risk
      dockerfile: Dockerfile
    container_name: dotnet-risk
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DATABASE_CONNECTION=Data Source=/app/Data/RiskService.db
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    volumes:
      - risk_data:/app/Data
    ports:
      - "5002:80"
    networks:
      - monitoreo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Prevención
  dotnet-prevention:
    build:
      context: ./packages/dotnet-prevention
      dockerfile: Dockerfile
    container_name: dotnet-prevention
    restart: unless-stopped
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DATABASE_CONNECTION=Data Source=/app/Data/PreventionService.db
      - DOTNET_RISK_API_URL=http://dotnet-risk
    volumes:
      - prevention_data:/app/Data
    depends_on:
      dotnet-risk:
        condition: service_healthy
    networks:
      - monitoreo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Educación Ambiental
  educacion-ambiental-api:
    build:
      context: ./packages/node-education
      dockerfile: Dockerfile
    container_name: educacion-ambiental-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=mariadb
      - DB_USER=root
      - DB_PASSWORD=${DB_ROOT_PASSWORD:-admin}
      - DB_DATABASE=monitoreo_ambiental
      - MONITORING_API_URL=http://monitoreo-ambiental-api:3000/api
    ports:
      - "3002:3002"
    depends_on:
      mariadb:
        condition: service_healthy
      monitoreo-ambiental-api:
        condition: service_healthy
    networks:
      - monitoreo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/"]
      interval: 20s
      timeout: 10s
      retries: 3

  # Interfaz de Usuario de Monitoreo
  ui-monitoring:
    build:
      context: ./packages/ui-monitoring
      dockerfile: Dockerfile
    container_name: monitoreo-ambiental-ui
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      monitoreo-ambiental-api:
        condition: service_healthy
      educacion-ambiental-api:
        condition: service_healthy
      dotnet-risk:
        condition: service_healthy
      dotnet-prevention:
        condition: service_healthy
    networks:
      - monitoreo-network
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_EDUCATION_API_URL=/education-api
      - REACT_APP_RISK_API_URL=/risk-api
      - REACT_APP_PREVENTION_API_URL=/prevention-api



  # Herramienta de Administración de Base de Datos (solo en desarrollo)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: monitoreo-ambiental-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mariadb
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD:-admin}
    ports:
      - "8080:80"
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - monitoreo-network
    # Esta sección hace que phpmyadmin solo se inicie en entorno de desarrollo
    profiles:
      - dev

# Volúmenes persistentes
volumes:
  mariadb_data:
  grafana_data:
  risk_data:
  prevention_data:

# Red personalizada para comunicación entre servicios
networks:
  monitoreo-network:
    driver: bridge