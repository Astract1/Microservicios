{"ast":null,"code":"import axios from'axios';// Constante para la URL base del API\n// En Docker, la ruta será /api según la configuración de Nginx\nconst API_URL=process.env.REACT_APP_API_URL||'/api';console.log('API URL configurada:',API_URL);// Instancia de axios con configuración común\nconst apiClient=axios.create({baseURL:API_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Interceptor para manejar errores globalmente\napiClient.interceptors.response.use(response=>response,error=>{console.error('Error en la solicitud API:',error);// Manejo centralizado de errores\nif(error.response){// El servidor respondió con un código de estado fuera del rango de 2xx\nconsole.error('Respuesta del servidor con error:',error.response.data);if(error.response.status===401){// Manejar redirección de autenticación si es necesario\n// window.location.href = '/login';\n}}else if(error.request){// La solicitud se realizó pero no se recibió respuesta\nconsole.error('No se recibió respuesta del servidor');}return Promise.reject(error);});/**\r\n * Servicio para obtener datos de monitoreo ambiental\r\n */// API URL base - se puede configurar mediante variable de entorno\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'/api';/**\r\n * Obtiene todos los datos necesarios para el dashboard\r\n * @returns {Promise<Object>} Datos del dashboard\r\n */export const fetchDashboardData=async()=>{// En una implementación real, se harían llamadas a la API\n// Por ahora, utilizamos datos mock\n// Mock de datos - en producción, deberían venir de la API\nconst mockData={weather:{location:'Ciudad de México',temperature:23,humidity:65,windSpeed:10,windDirection:'NE',conditions:'Parcialmente nublado',icon:'partly-cloudy'},airQuality:{location:'Ciudad de México',aqi:55,category:'Moderado',mainPollutant:'PM2.5',pm25:18.2,pm10:40.5,o3:35.8,no2:25.1,so2:10.3,co:0.8,timestamp:new Date().toLocaleDateString()},alerts:[{id:1,title:'Peligro de inundación',message:'Se esperan lluvias intensas en las próximas 24 horas.',severity:'critical',timestamp:'2023-06-24T14:30:00'},{id:2,title:'Mala calidad del aire',message:'Niveles de partículas PM2.5 por encima del umbral recomendado.',severity:'warning',timestamp:'2023-06-24T10:15:00'}],statistics:{averageTemperature:22.5,maxTemperature:28.3,minTemperature:16.7,averageHumidity:64,averageAQI:62,rainfallLastMonth:45.8}};// Simulamos retraso en la carga (eliminarlo en producción)\nreturn new Promise(resolve=>{setTimeout(()=>{resolve(mockData);},500);});/* \r\n  Implementación real con fetch:\r\n  \r\n  try {\r\n    const responses = await Promise.all([\r\n      fetch(`${API_BASE_URL}/weather`),\r\n      fetch(`${API_BASE_URL}/air-quality`),\r\n      fetch(`${API_BASE_URL}/alerts`),\r\n      fetch(`${API_BASE_URL}/statistics`)\r\n    ]);\r\n\r\n    const [weather, airQuality, alerts, statistics] = await Promise.all(\r\n      responses.map(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Error HTTP: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n    );\r\n\r\n    return { weather, airQuality, alerts, statistics };\r\n  } catch (error) {\r\n    console.error('Error al cargar datos del dashboard:', error);\r\n    throw error;\r\n  }\r\n  */};// Función auxiliar para extraer promedios diarios\nconst extractDailyAverage=airQualityData=>{var _airQualityData$pollu,_airQualityData$pollu2,_airQualityData$pollu3;// Esta función extrae datos para estadísticas a partir de los datos de calidad del aire\n// En una implementación real, esto sería más complejo y utilizaría datos históricos\nif(!airQualityData||!airQualityData.pollutants){return{pm25:0,pm10:0,o3:0};}return{pm25:((_airQualityData$pollu=airQualityData.pollutants.pm25)===null||_airQualityData$pollu===void 0?void 0:_airQualityData$pollu.value)||0,pm10:((_airQualityData$pollu2=airQualityData.pollutants.pm10)===null||_airQualityData$pollu2===void 0?void 0:_airQualityData$pollu2.value)||0,o3:((_airQualityData$pollu3=airQualityData.pollutants.o3)===null||_airQualityData$pollu3===void 0?void 0:_airQualityData$pollu3.value)||0};};export const fetchWeatherData=async location=>{try{const params=location?{location}:{};const response=await apiClient.get('/weather',{params});return response.data;}catch(error){console.error('Error al obtener datos del clima:',error);throw error;}};export const fetchAirQualityData=async location=>{try{const params=location?{location}:{};const response=await apiClient.get('/air-quality',{params});// También obtener estaciones de monitoreo\nconst stationsResponse=await apiClient.get('/air-quality/stations');// Combinar datos\nreturn{...response.data,stations:stationsResponse.data};}catch(error){console.error('Error al obtener datos de calidad del aire:',error);throw error;}};export const fetchMapData=async()=>{try{const stationsResponse=await apiClient.get('/air-quality/stations');const neighborhoodsResponse=await apiClient.get('/air-quality/neighborhoods');return{monitoringStations:stationsResponse.data,pollutantAreas:neighborhoodsResponse.data,weatherAlerts:[]// No tenemos endpoint para esto todavía\n};}catch(error){console.error('Error al obtener datos del mapa:',error);throw error;}};// Exportar el cliente API para uso en otros servicios\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","apiClient","create","baseURL","timeout","headers","interceptors","response","use","error","data","status","request","Promise","reject","API_BASE_URL","fetchDashboardData","mockData","weather","location","temperature","humidity","windSpeed","windDirection","conditions","icon","airQuality","aqi","category","mainPollutant","pm25","pm10","o3","no2","so2","co","timestamp","Date","toLocaleDateString","alerts","id","title","message","severity","statistics","averageTemperature","maxTemperature","minTemperature","averageHumidity","averageAQI","rainfallLastMonth","resolve","setTimeout","extractDailyAverage","airQualityData","_airQualityData$pollu","_airQualityData$pollu2","_airQualityData$pollu3","pollutants","value","fetchWeatherData","params","get","fetchAirQualityData","stationsResponse","stations","fetchMapData","neighborhoodsResponse","monitoringStations","pollutantAreas","weatherAlerts"],"sources":["C:/Users/Juan Jimenez/Desktop/Microservicios/packages/ui-monitoring/src/services/monitoringService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Constante para la URL base del API\r\n// En Docker, la ruta será /api según la configuración de Nginx\r\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\r\nconsole.log('API URL configurada:', API_URL);\r\n\r\n// Instancia de axios con configuración común\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para manejar errores globalmente\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('Error en la solicitud API:', error);\r\n    // Manejo centralizado de errores\r\n    if (error.response) {\r\n      // El servidor respondió con un código de estado fuera del rango de 2xx\r\n      console.error('Respuesta del servidor con error:', error.response.data);\r\n      if (error.response.status === 401) {\r\n        // Manejar redirección de autenticación si es necesario\r\n        // window.location.href = '/login';\r\n      }\r\n    } else if (error.request) {\r\n      // La solicitud se realizó pero no se recibió respuesta\r\n      console.error('No se recibió respuesta del servidor');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Servicio para obtener datos de monitoreo ambiental\r\n */\r\n\r\n// API URL base - se puede configurar mediante variable de entorno\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\n/**\r\n * Obtiene todos los datos necesarios para el dashboard\r\n * @returns {Promise<Object>} Datos del dashboard\r\n */\r\nexport const fetchDashboardData = async () => {\r\n  // En una implementación real, se harían llamadas a la API\r\n  // Por ahora, utilizamos datos mock\r\n\r\n  // Mock de datos - en producción, deberían venir de la API\r\n  const mockData = {\r\n    weather: {\r\n      location: 'Ciudad de México',\r\n      temperature: 23,\r\n      humidity: 65,\r\n      windSpeed: 10,\r\n      windDirection: 'NE',\r\n      conditions: 'Parcialmente nublado',\r\n      icon: 'partly-cloudy'\r\n    },\r\n    airQuality: {\r\n      location: 'Ciudad de México',\r\n      aqi: 55,\r\n      category: 'Moderado',\r\n      mainPollutant: 'PM2.5',\r\n      pm25: 18.2,\r\n      pm10: 40.5,\r\n      o3: 35.8,\r\n      no2: 25.1,\r\n      so2: 10.3,\r\n      co: 0.8,\r\n      timestamp: new Date().toLocaleDateString()\r\n    },\r\n    alerts: [\r\n      {\r\n        id: 1,\r\n        title: 'Peligro de inundación',\r\n        message: 'Se esperan lluvias intensas en las próximas 24 horas.',\r\n        severity: 'critical',\r\n        timestamp: '2023-06-24T14:30:00'\r\n      },\r\n      {\r\n        id: 2,\r\n        title: 'Mala calidad del aire',\r\n        message: 'Niveles de partículas PM2.5 por encima del umbral recomendado.',\r\n        severity: 'warning',\r\n        timestamp: '2023-06-24T10:15:00'\r\n      }\r\n    ],\r\n    statistics: {\r\n      averageTemperature: 22.5,\r\n      maxTemperature: 28.3,\r\n      minTemperature: 16.7,\r\n      averageHumidity: 64,\r\n      averageAQI: 62,\r\n      rainfallLastMonth: 45.8\r\n    }\r\n  };\r\n\r\n  // Simulamos retraso en la carga (eliminarlo en producción)\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(mockData);\r\n    }, 500);\r\n  });\r\n\r\n  /* \r\n  Implementación real con fetch:\r\n  \r\n  try {\r\n    const responses = await Promise.all([\r\n      fetch(`${API_BASE_URL}/weather`),\r\n      fetch(`${API_BASE_URL}/air-quality`),\r\n      fetch(`${API_BASE_URL}/alerts`),\r\n      fetch(`${API_BASE_URL}/statistics`)\r\n    ]);\r\n\r\n    const [weather, airQuality, alerts, statistics] = await Promise.all(\r\n      responses.map(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Error HTTP: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n    );\r\n\r\n    return { weather, airQuality, alerts, statistics };\r\n  } catch (error) {\r\n    console.error('Error al cargar datos del dashboard:', error);\r\n    throw error;\r\n  }\r\n  */\r\n};\r\n\r\n// Función auxiliar para extraer promedios diarios\r\nconst extractDailyAverage = (airQualityData) => {\r\n  // Esta función extrae datos para estadísticas a partir de los datos de calidad del aire\r\n  // En una implementación real, esto sería más complejo y utilizaría datos históricos\r\n  \r\n  if (!airQualityData || !airQualityData.pollutants) {\r\n    return { pm25: 0, pm10: 0, o3: 0 };\r\n  }\r\n  \r\n  return {\r\n    pm25: airQualityData.pollutants.pm25?.value || 0,\r\n    pm10: airQualityData.pollutants.pm10?.value || 0,\r\n    o3: airQualityData.pollutants.o3?.value || 0\r\n  };\r\n};\r\n\r\nexport const fetchWeatherData = async (location) => {\r\n  try {\r\n    const params = location ? { location } : {};\r\n    const response = await apiClient.get('/weather', { params });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del clima:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAirQualityData = async (location) => {\r\n  try {\r\n    const params = location ? { location } : {};\r\n    const response = await apiClient.get('/air-quality', { params });\r\n    \r\n    // También obtener estaciones de monitoreo\r\n    const stationsResponse = await apiClient.get('/air-quality/stations');\r\n    \r\n    // Combinar datos\r\n    return {\r\n      ...response.data,\r\n      stations: stationsResponse.data\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener datos de calidad del aire:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchMapData = async () => {\r\n  try {\r\n    const stationsResponse = await apiClient.get('/air-quality/stations');\r\n    const neighborhoodsResponse = await apiClient.get('/air-quality/neighborhoods');\r\n    \r\n    return {\r\n      monitoringStations: stationsResponse.data,\r\n      pollutantAreas: neighborhoodsResponse.data,\r\n      weatherAlerts: [] // No tenemos endpoint para esto todavía\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del mapa:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Exportar el cliente API para uso en otros servicios\r\nexport default apiClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}