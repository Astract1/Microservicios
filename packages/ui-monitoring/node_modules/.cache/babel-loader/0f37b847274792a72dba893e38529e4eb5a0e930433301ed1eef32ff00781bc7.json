{"ast":null,"code":"import axios from 'axios';\n\n// Constante para la URL base del API\n// En Docker, la ruta será /api según la configuración de Nginx\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\nconsole.log('API URL configurada:', API_URL);\n\n// Instancia de axios con configuración común\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para manejar errores globalmente\napiClient.interceptors.response.use(response => response, error => {\n  console.error('Error en la solicitud API:', error);\n  // Manejo centralizado de errores\n  if (error.response) {\n    // El servidor respondió con un código de estado fuera del rango de 2xx\n    console.error('Respuesta del servidor con error:', error.response.data);\n    if (error.response.status === 401) {\n      // Manejar redirección de autenticación si es necesario\n      // window.location.href = '/login';\n    }\n  } else if (error.request) {\n    // La solicitud se realizó pero no se recibió respuesta\n    console.error('No se recibió respuesta del servidor');\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * Servicio para obtener datos de monitoreo ambiental\r\n */\n\n// API URL base - se puede configurar mediante variable de entorno\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n/**\r\n * Obtiene todos los datos necesarios para el dashboard\r\n * @returns {Promise<Object>} Datos del dashboard\r\n */\nexport const fetchDashboardData = async () => {\n  // En una implementación real, se harían llamadas a la API\n  // Por ahora, utilizamos datos mock\n\n  // Mock de datos - en producción, deberían venir de la API\n  const mockData = {\n    weather: {\n      location: 'Ciudad de México',\n      temperature: 23,\n      humidity: 65,\n      windSpeed: 10,\n      windDirection: 'NE',\n      conditions: 'Parcialmente nublado',\n      icon: 'partly-cloudy'\n    },\n    airQuality: {\n      location: 'Ciudad de México',\n      aqi: 55,\n      category: 'Moderado',\n      mainPollutant: 'PM2.5',\n      pm25: 18.2,\n      pm10: 40.5,\n      o3: 35.8,\n      no2: 25.1,\n      so2: 10.3,\n      co: 0.8,\n      timestamp: new Date().toLocaleDateString()\n    },\n    alerts: [{\n      id: 1,\n      title: 'Peligro de inundación',\n      message: 'Se esperan lluvias intensas en las próximas 24 horas.',\n      severity: 'critical',\n      timestamp: '2023-06-24T14:30:00'\n    }, {\n      id: 2,\n      title: 'Mala calidad del aire',\n      message: 'Niveles de partículas PM2.5 por encima del umbral recomendado.',\n      severity: 'warning',\n      timestamp: '2023-06-24T10:15:00'\n    }],\n    statistics: {\n      averageTemperature: 22.5,\n      maxTemperature: 28.3,\n      minTemperature: 16.7,\n      averageHumidity: 64,\n      averageAQI: 62,\n      rainfallLastMonth: 45.8\n    }\n  };\n\n  // Simulamos retraso en la carga (eliminarlo en producción)\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockData);\n    }, 500);\n  });\n\n  /* \r\n  Implementación real con fetch:\r\n  \r\n  try {\r\n    const responses = await Promise.all([\r\n      fetch(`${API_BASE_URL}/weather`),\r\n      fetch(`${API_BASE_URL}/air-quality`),\r\n      fetch(`${API_BASE_URL}/alerts`),\r\n      fetch(`${API_BASE_URL}/statistics`)\r\n    ]);\r\n      const [weather, airQuality, alerts, statistics] = await Promise.all(\r\n      responses.map(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Error HTTP: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n    );\r\n      return { weather, airQuality, alerts, statistics };\r\n  } catch (error) {\r\n    console.error('Error al cargar datos del dashboard:', error);\r\n    throw error;\r\n  }\r\n  */\n};\n\n// Función auxiliar para extraer promedios diarios\nconst extractDailyAverage = airQualityData => {\n  var _airQualityData$pollu, _airQualityData$pollu2, _airQualityData$pollu3;\n  // Esta función extrae datos para estadísticas a partir de los datos de calidad del aire\n  // En una implementación real, esto sería más complejo y utilizaría datos históricos\n\n  if (!airQualityData || !airQualityData.pollutants) {\n    return {\n      pm25: 0,\n      pm10: 0,\n      o3: 0\n    };\n  }\n  return {\n    pm25: ((_airQualityData$pollu = airQualityData.pollutants.pm25) === null || _airQualityData$pollu === void 0 ? void 0 : _airQualityData$pollu.value) || 0,\n    pm10: ((_airQualityData$pollu2 = airQualityData.pollutants.pm10) === null || _airQualityData$pollu2 === void 0 ? void 0 : _airQualityData$pollu2.value) || 0,\n    o3: ((_airQualityData$pollu3 = airQualityData.pollutants.o3) === null || _airQualityData$pollu3 === void 0 ? void 0 : _airQualityData$pollu3.value) || 0\n  };\n};\nexport const fetchWeatherData = async location => {\n  try {\n    const params = location ? {\n      location\n    } : {};\n    const response = await apiClient.get('/weather', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error al obtener datos del clima:', error);\n    throw error;\n  }\n};\nexport const fetchAirQualityData = async location => {\n  try {\n    const params = location ? {\n      location\n    } : {};\n    const response = await apiClient.get('/air-quality', {\n      params\n    });\n\n    // También obtener estaciones de monitoreo\n    const stationsResponse = await apiClient.get('/air-quality/stations');\n\n    // Combinar datos\n    return {\n      ...response.data,\n      stations: stationsResponse.data\n    };\n  } catch (error) {\n    console.error('Error al obtener datos de calidad del aire:', error);\n    throw error;\n  }\n};\nexport const fetchMapData = async () => {\n  try {\n    const stationsResponse = await apiClient.get('/air-quality/stations');\n    const neighborhoodsResponse = await apiClient.get('/air-quality/neighborhoods');\n    return {\n      monitoringStations: stationsResponse.data,\n      pollutantAreas: neighborhoodsResponse.data,\n      weatherAlerts: [] // No tenemos endpoint para esto todavía\n    };\n  } catch (error) {\n    console.error('Error al obtener datos del mapa:', error);\n    throw error;\n  }\n};\n\n// Exportar el cliente API para uso en otros servicios\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","apiClient","create","baseURL","timeout","headers","interceptors","response","use","error","data","status","request","Promise","reject","API_BASE_URL","fetchDashboardData","mockData","weather","location","temperature","humidity","windSpeed","windDirection","conditions","icon","airQuality","aqi","category","mainPollutant","pm25","pm10","o3","no2","so2","co","timestamp","Date","toLocaleDateString","alerts","id","title","message","severity","statistics","averageTemperature","maxTemperature","minTemperature","averageHumidity","averageAQI","rainfallLastMonth","resolve","setTimeout","extractDailyAverage","airQualityData","_airQualityData$pollu","_airQualityData$pollu2","_airQualityData$pollu3","pollutants","value","fetchWeatherData","params","get","fetchAirQualityData","stationsResponse","stations","fetchMapData","neighborhoodsResponse","monitoringStations","pollutantAreas","weatherAlerts"],"sources":["C:/Users/Juan Jimenez/Desktop/Microservicios/packages/ui-monitoring/src/services/monitoringService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Constante para la URL base del API\r\n// En Docker, la ruta será /api según la configuración de Nginx\r\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\r\nconsole.log('API URL configurada:', API_URL);\r\n\r\n// Instancia de axios con configuración común\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para manejar errores globalmente\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('Error en la solicitud API:', error);\r\n    // Manejo centralizado de errores\r\n    if (error.response) {\r\n      // El servidor respondió con un código de estado fuera del rango de 2xx\r\n      console.error('Respuesta del servidor con error:', error.response.data);\r\n      if (error.response.status === 401) {\r\n        // Manejar redirección de autenticación si es necesario\r\n        // window.location.href = '/login';\r\n      }\r\n    } else if (error.request) {\r\n      // La solicitud se realizó pero no se recibió respuesta\r\n      console.error('No se recibió respuesta del servidor');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Servicio para obtener datos de monitoreo ambiental\r\n */\r\n\r\n// API URL base - se puede configurar mediante variable de entorno\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\n/**\r\n * Obtiene todos los datos necesarios para el dashboard\r\n * @returns {Promise<Object>} Datos del dashboard\r\n */\r\nexport const fetchDashboardData = async () => {\r\n  // En una implementación real, se harían llamadas a la API\r\n  // Por ahora, utilizamos datos mock\r\n\r\n  // Mock de datos - en producción, deberían venir de la API\r\n  const mockData = {\r\n    weather: {\r\n      location: 'Ciudad de México',\r\n      temperature: 23,\r\n      humidity: 65,\r\n      windSpeed: 10,\r\n      windDirection: 'NE',\r\n      conditions: 'Parcialmente nublado',\r\n      icon: 'partly-cloudy'\r\n    },\r\n    airQuality: {\r\n      location: 'Ciudad de México',\r\n      aqi: 55,\r\n      category: 'Moderado',\r\n      mainPollutant: 'PM2.5',\r\n      pm25: 18.2,\r\n      pm10: 40.5,\r\n      o3: 35.8,\r\n      no2: 25.1,\r\n      so2: 10.3,\r\n      co: 0.8,\r\n      timestamp: new Date().toLocaleDateString()\r\n    },\r\n    alerts: [\r\n      {\r\n        id: 1,\r\n        title: 'Peligro de inundación',\r\n        message: 'Se esperan lluvias intensas en las próximas 24 horas.',\r\n        severity: 'critical',\r\n        timestamp: '2023-06-24T14:30:00'\r\n      },\r\n      {\r\n        id: 2,\r\n        title: 'Mala calidad del aire',\r\n        message: 'Niveles de partículas PM2.5 por encima del umbral recomendado.',\r\n        severity: 'warning',\r\n        timestamp: '2023-06-24T10:15:00'\r\n      }\r\n    ],\r\n    statistics: {\r\n      averageTemperature: 22.5,\r\n      maxTemperature: 28.3,\r\n      minTemperature: 16.7,\r\n      averageHumidity: 64,\r\n      averageAQI: 62,\r\n      rainfallLastMonth: 45.8\r\n    }\r\n  };\r\n\r\n  // Simulamos retraso en la carga (eliminarlo en producción)\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(mockData);\r\n    }, 500);\r\n  });\r\n\r\n  /* \r\n  Implementación real con fetch:\r\n  \r\n  try {\r\n    const responses = await Promise.all([\r\n      fetch(`${API_BASE_URL}/weather`),\r\n      fetch(`${API_BASE_URL}/air-quality`),\r\n      fetch(`${API_BASE_URL}/alerts`),\r\n      fetch(`${API_BASE_URL}/statistics`)\r\n    ]);\r\n\r\n    const [weather, airQuality, alerts, statistics] = await Promise.all(\r\n      responses.map(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Error HTTP: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n    );\r\n\r\n    return { weather, airQuality, alerts, statistics };\r\n  } catch (error) {\r\n    console.error('Error al cargar datos del dashboard:', error);\r\n    throw error;\r\n  }\r\n  */\r\n};\r\n\r\n// Función auxiliar para extraer promedios diarios\r\nconst extractDailyAverage = (airQualityData) => {\r\n  // Esta función extrae datos para estadísticas a partir de los datos de calidad del aire\r\n  // En una implementación real, esto sería más complejo y utilizaría datos históricos\r\n  \r\n  if (!airQualityData || !airQualityData.pollutants) {\r\n    return { pm25: 0, pm10: 0, o3: 0 };\r\n  }\r\n  \r\n  return {\r\n    pm25: airQualityData.pollutants.pm25?.value || 0,\r\n    pm10: airQualityData.pollutants.pm10?.value || 0,\r\n    o3: airQualityData.pollutants.o3?.value || 0\r\n  };\r\n};\r\n\r\nexport const fetchWeatherData = async (location) => {\r\n  try {\r\n    const params = location ? { location } : {};\r\n    const response = await apiClient.get('/weather', { params });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del clima:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAirQualityData = async (location) => {\r\n  try {\r\n    const params = location ? { location } : {};\r\n    const response = await apiClient.get('/air-quality', { params });\r\n    \r\n    // También obtener estaciones de monitoreo\r\n    const stationsResponse = await apiClient.get('/air-quality/stations');\r\n    \r\n    // Combinar datos\r\n    return {\r\n      ...response.data,\r\n      stations: stationsResponse.data\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener datos de calidad del aire:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchMapData = async () => {\r\n  try {\r\n    const stationsResponse = await apiClient.get('/air-quality/stations');\r\n    const neighborhoodsResponse = await apiClient.get('/air-quality/neighborhoods');\r\n    \r\n    return {\r\n      monitoringStations: stationsResponse.data,\r\n      pollutantAreas: neighborhoodsResponse.data,\r\n      weatherAlerts: [] // No tenemos endpoint para esto todavía\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al obtener datos del mapa:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Exportar el cliente API para uso en otros servicios\r\nexport default apiClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}