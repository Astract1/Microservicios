// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiskService.Data;

#nullable disable

namespace RiskService.Migrations
{
    [DbContext(typeof(RiskDbContext))]
    [Migration("20250512054029_MakeTestResponsesOptional")]
    partial class MakeTestResponsesOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("RiskService.Models.EnvironmentalConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AirQualityIndex")
                        .HasColumnType("REAL");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Precipitation")
                        .HasColumnType("REAL");

                    b.Property<int?>("RiskEvaluationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RiskEvaluationId1")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("UVIndex")
                        .HasColumnType("REAL");

                    b.Property<string>("WeatherCondition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RiskEvaluationId")
                        .IsUnique();

                    b.HasIndex("RiskEvaluationId1");

                    b.ToTable("EnvironmentalConditions");
                });

            modelBuilder.Entity("RiskService.Models.RiskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnvironmentalConditions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FactorsConsidered")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TestResponses")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RiskEvaluations");
                });

            modelBuilder.Entity("RiskService.Models.RiskResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RiskResults", (string)null);
                });

            modelBuilder.Entity("RiskService.Models.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MedicalConditions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RiskService.Models.EnvironmentalConditions", b =>
                {
                    b.HasOne("RiskService.Models.RiskEvaluation", null)
                        .WithOne("CurrentConditions")
                        .HasForeignKey("RiskService.Models.EnvironmentalConditions", "RiskEvaluationId");

                    b.HasOne("RiskService.Models.RiskEvaluation", "RiskEvaluation")
                        .WithMany()
                        .HasForeignKey("RiskEvaluationId1");

                    b.Navigation("RiskEvaluation");
                });

            modelBuilder.Entity("RiskService.Models.RiskEvaluation", b =>
                {
                    b.HasOne("RiskService.Models.UserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiskService.Models.RiskEvaluation", b =>
                {
                    b.Navigation("CurrentConditions")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
